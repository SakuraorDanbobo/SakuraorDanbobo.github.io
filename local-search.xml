<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/04/25/%E5%9C%B0%E5%AE%AB%E5%8F%96%E5%AE%9D/"/>
    <url>/2022/04/25/%E5%9C%B0%E5%AE%AB%E5%8F%96%E5%AE%9D/</url>
    
    <content type="html"><![CDATA[<p><strong>描述</strong></p><p>X 国王有一个地宫宝库。是 n x m 个格子的矩阵。每个格子放一件宝贝。每个宝贝贴着价值标签。<br>地宫的入口在左上角，出口在右下角。<br>小明被带到地宫的入口，国王要求他只能向右或向下行走。<br>走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。<br>当小明走到出口时，如果他手中的宝贝恰好是k件，则这些宝贝就可以送给小明。<br>请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这k件宝贝。</p><p><strong>输入</strong></p><p>输入一行3个整数，用空格分开：n m k (1&lt;&#x3D;n,m&lt;&#x3D;50, 1&lt;&#x3D;k&lt;&#x3D;12)<br>接下来有 n 行数据，每行有 m 个整数 Ci (0&lt;&#x3D;Ci&lt;&#x3D;12)代表这个格子上的宝物的价值</p><p><strong>输出</strong></p><p>要求输出一个整数，表示正好取k个宝贝的行动方案数。该数字可能很大，输出它对 1000000007 取模的结果。</p><p><strong>样例输入</strong></p><p>2 2 2<br>1 2<br>2 1</p><p><strong>样例输出</strong></p><p>2</p><p><strong>提示</strong></p><p>样例输入2</p><p>2 3 2<br>1 2 3<br>2 1 5</p><p>样例输出2</p><p>14</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.io.StreamTokenizer;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> <br>&#123;<br><span class="hljs-keyword">static</span> Scanner sz=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(System.in));<br><span class="hljs-keyword">static</span> StreamTokenizer in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamTokenizer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in),<span class="hljs-number">32768</span>));<br><span class="hljs-keyword">static</span> PrintWriter out=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(System.out));<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextInt</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;in.nextToken();<span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) in.nval;&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> N=(<span class="hljs-type">int</span>)(<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>);<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> mod=(<span class="hljs-type">int</span>) (<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>);<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> n,m,num,dp[][][][],ma[][];<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br> n=nextInt();<br> m=nextInt();<br> num=nextInt();<br> ma=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>][m+<span class="hljs-number">1</span>];<br> <span class="hljs-comment">//dp[i][j][k][l],四个状态 ， 在点(i,j)处取k件物品的最大价值为l的总方案数</span><br> dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>][m+<span class="hljs-number">1</span>][<span class="hljs-number">15</span>][<span class="hljs-number">15</span>];<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br> &#123;<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br> &#123;<br> ma[i][j]=nextInt();<br> <span class="hljs-comment">//价值范围变为1~13,0用来表示当k为0时取的最后一件物品的价值为0</span><br> ma[i][j]++;<br> &#125;<br> &#125;<br> <span class="hljs-comment">//方法一 正向递推转移</span><br><span class="hljs-comment">// //初始化状态</span><br><span class="hljs-comment">// dp[1][1][1][ma[1][1]]=1; //起点拿宝物</span><br><span class="hljs-comment">// dp[1][1][0][0]=1; //起点不拿宝物</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// 从前往后推</span><br><span class="hljs-comment">// //x点左标</span><br><span class="hljs-comment">// for(int i=1;i&lt;=n;i++)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// //y点坐标</span><br><span class="hljs-comment">// for(int j=1;j&lt;=m;j++) </span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// for(int k=0;k&lt;=num;k++) //物品数</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// for(int l=0;l&lt;=13;l++) //最大价值数</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// //不取</span><br><span class="hljs-comment">// //向下走转移</span><br><span class="hljs-comment">// dp[i][j][k][l]=(dp[i][j][k][l]+dp[i-1][j][k][l])%mod;</span><br><span class="hljs-comment">// //向右走转移</span><br><span class="hljs-comment">// dp[i][j][k][l]=(dp[i][j][k][l]+dp[i][j-1][k][l])%mod;</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// //取 物品数要大于0 </span><br><span class="hljs-comment">// //将上一步向下，向右走的所有最大值数小于l的方案全部累加起来</span><br><span class="hljs-comment">// if(ma[i][j]==l &amp;&amp; k&gt;0)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// for(int c=0;c&lt;l;c++)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">////向下走转移</span><br><span class="hljs-comment">// dp[i][j][k][l]=(dp[i][j][k][l]+dp[i-1][j][k-1][c])%mod;</span><br><span class="hljs-comment">// //向右走转移</span><br><span class="hljs-comment">// dp[i][j][k][l]=(dp[i][j][k][l]+dp[i][j-1][k-1][c])%mod;</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// int ans=0;</span><br><span class="hljs-comment">// for(int i=1;i&lt;=13;i++)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">// ans=(ans+dp[n][m][num][i])%mod;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//  out.println(ans);</span><br> <br> <span class="hljs-comment">//方法二. 记忆化搜索，从后往前推进</span><br> init();<br>  out.println(dfs(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>  out.flush();<br>&#125;<br><br><span class="hljs-comment">//初始化dp值，防止方案数为0的步骤重复判别</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;=n; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= m; j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">15</span>; k++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; <span class="hljs-number">15</span>; l++)&#123;<br>dp[i][j][k][l] = -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//（x,y）当前位置   cnt拥有宝物的数量  val拥有的宝物的最大值</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y,<span class="hljs-type">int</span> cnt,<span class="hljs-type">int</span> val)</span> <br>&#123;<br><span class="hljs-comment">//出界判断</span><br><span class="hljs-keyword">if</span>(x&gt;n || y&gt;m || cnt&gt;num)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//重复判别</span><br><span class="hljs-keyword">if</span>(dp[x][y][cnt][val]!=-<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> dp[x][y][cnt][val];<br>&#125;<br><span class="hljs-comment">//到达出口</span><br><span class="hljs-keyword">if</span>(x==n &amp;&amp; y==m)<br>&#123;<br><span class="hljs-comment">//满足条件，1. 已经取了num件宝物 或者 2. 是取了当前格宝物后为num件宝物</span><br><span class="hljs-keyword">if</span>(cnt==num || (cnt==num-<span class="hljs-number">1</span> &amp;&amp; val&lt;ma[x][y]))<br>&#123;<br><span class="hljs-keyword">return</span> dp[x][y][cnt][val]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//取</span><br><span class="hljs-keyword">if</span>(ma[x][y]&gt;val)<br>&#123;<br><span class="hljs-comment">//向下走</span><br>ans+=dfs(x+<span class="hljs-number">1</span>, y, cnt+<span class="hljs-number">1</span>, ma[x][y]);<br>ans%=mod;<br><span class="hljs-comment">//向右走</span><br>ans+=dfs(x, y+<span class="hljs-number">1</span>, cnt+<span class="hljs-number">1</span>, ma[x][y]);<br>ans%=mod;<br>&#125;<br><br><span class="hljs-comment">//不取</span><br><span class="hljs-comment">//向下走</span><br>ans+=dfs(x+<span class="hljs-number">1</span>, y, cnt, val);<br>ans%=mod;<br><span class="hljs-comment">//向右走</span><br>ans+=dfs(x, y+<span class="hljs-number">1</span>, cnt, val);<br>ans%=mod;<br><br><span class="hljs-keyword">return</span> dp[x][y][cnt][val]=ans;<br>&#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/25/hello-world/"/>
    <url>/2022/04/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
